//1.#91 Testing Objects for Properties
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/testing-objects-for-properties
function checkObj(obj, checkProp) {
    // Only change code below this line
    if (obj.hasOwnProperty(checkProp)){
        return obj[checkProp];
    } else {
        return "Not Found";
    }
    // Only change code above this line
}

//2.#92 Manipulating Complex Objects
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/manipulating-complex-objects
var myMusic = [
    {
        "artist": "Billy Joel",
        "title": "Piano Man",
        "release_year": 1973,
        "formats": [
            "CD",
            "8T",
            "LP"
        ],
        "gold": true
    },
    {
        "artist": "Mikael",
        "title": "someTitle",
        "release_year": 2021,
        "formats": [
            "CD1",
            "8T1",
            "LP1"
        ],
        "gold": false
    }
];

//3.#93 Accessing Nested Objects
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-objects
var myStorage = {
    "car": {
        "inside": {
            "glove box": "maps",
            "passenger seat": "crumbs"
        },
        "outside": {
            "trunk": "jack"
        }
    }
};

var gloveBoxContents = myStorage.car.inside["glove box"];

//4.#94 Accessing Nested Arrays
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/accessing-nested-arrays
var myPlants = [
    {
        type: "flowers",
        list: [
            "rose",
            "tulip",
            "dandelion"
        ]
    },
    {
        type: "trees",
        list: [
            "fir",
            "pine",
            "birch"
        ]
    }
];

var secondTree = myPlants[1].list[1];

//5.#95 Record Collection
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/record-collection
// Setup
var recordCollection = {
    2548: {
        albumTitle: 'Slippery When Wet',
        artist: 'Bon Jovi',
        tracks: ['Let It Rock', 'You Give Love a Bad Name']
    },
    2468: {
        albumTitle: '1999',
        artist: 'Prince',
        tracks: ['1999', 'Little Red Corvette']
    },
    1245: {
        artist: 'Robert Palmer',
        tracks: []
    },
    5439: {
        albumTitle: 'ABBA Gold'
    }
};
// Only change code below this line
function updateRecords(records, id, prop, value) {
    if(prop !== "tracks" && value !== ""){
        records[id][prop] = value;
    } else if (prop === "tracks" && records[id].hasOwnProperty("tracks") === false && value !== ""){
        records[id][prop] = [value];
    } else if (prop === "tracks" && records[id].hasOwnProperty("tracks") && value !== ""){
        records[id].tracks.push(value);
    } else if (value == ""){
        delete records[id][prop];
    }
    return records;
}

updateRecords(recordCollection, 5439, 'artist', 'ABBA');

//6.#96 Iterate with JavaScript While Loops
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-while-loops
// Setup
var myArray = [];

// Only change code below this line
var i = 5;
while(i>=0){
    myArray.push(i);
    i--;
}

//7.#97 Iterate with JavaScript For Loops
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-for-loops
// Setup
var myArray = [];

// Only change code below this line
for(let i=1; i<=5;i++){
    myArray.push(i);
}

//8.#98 Iterate Odd Numbers With a For Loop
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-odd-numbers-with-a-for-loop
// Setup
var myArray = [];

// Only change code below this line
for(let i=1;i<=9;i+=2){
    myArray.push(i);
}

//9.#99 Count Backwards With a For Loop
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/count-backwards-with-a-for-loop
// Setup
var myArray = [];
for (let i = 9; i > 0; i -=2){
    myArray.push(i);
}
// Only change code below this line

//10.#100 Iterate Through an Array with a For Loop
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-through-an-array-with-a-for-loop
// Setup
var myArr = [ 2, 3, 4, 5, 6];

// Only change code below this line
let total = 0;
for (let i = 0; i<myArr.length; i++){
    total += myArr[i];
}

//11.#101 Nesting For Loops
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/nesting-for-loops
function multiplyAll(arr) {
    var product = 1;
    for (let i=0; i<arr.length; i++){
        for (let j = 0; j<arr[i].length; j++){
            product *= arr[i][j];
        }
    }
    return product;
}

multiplyAll([[1,2],[3,4],[5,6,7]]);

//12.#102 Iterate with JavaScript Do...While Loops
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/iterate-with-javascript-do---while-loops
// Setup
var myArray = [];
var i = 10;

// Only change code below this line
do {
    myArray.push(i);
    i++;
} while (i < 5);

//13.#103 Replace Loops using Recursion
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/replace-loops-using-recursion
function sum(arr, n) {
    // Only change code below this line
    if (n==0){
        return 0;
    } else {
        return sum(arr, n-1) + arr[n-1];
    }
    // Only change code above this line
}

//14.#104 Profile Lookup
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/profile-lookup
// Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["JavaScript", "Gaming", "Foxes"]
    }
];

function lookUpProfile(name, prop) {
    // Only change code below this line
    for (let i=0; i<contacts.length; i++){
        if (contacts[i].firstName === name){
            if(contacts[i][prop] !== undefined) {
                return contacts[i][prop];
            } else {
                return "No such property";
            }
        }
    }
    return "No such contact";
    // Only change code above this line

}


lookUpProfile("Akira", "likes");

//15.#105 Generate Random Fractions with JavaScript
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-fractions-with-javascript
function randomFraction() {

    // Only change code below this line

    return Math.random();

    // Only change code above this line
}

//16.#106 Generate Random Whole Numbers with JavaScript
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-with-javascript
function randomWholeNum() {

    // Only change code below this line

    return Math.floor(Math.random()*10);
}

//17.#107 Generate Random Whole Numbers within a Range
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/generate-random-whole-numbers-within-a-range
function randomRange(myMin, myMax) {
    // Only change code below this line
    const res = Math.floor(Math.random() * (myMax - myMin + 1)) + myMin
    return res;
    // Only change code above this line
}

//18.#108 Use the parseInt Function
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function
function convertToInteger(str) {
    return parseInt(str);
}

convertToInteger("56");


//18.#109 Use the parseInt Function with a Radix
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-parseint-function-with-a-radix
function convertToInteger(str) {
    return parseInt(str,2);
}

convertToInteger("10011");

//19.#110 Use the Conditional (Ternary) Operator
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-the-conditional-ternary-operator
function checkEqual(a, b) {
    return a === b ? "Equal" : "Not Equal"
}

checkEqual(1, 2);

//20.#111 Use Multiple Conditional (Ternary) Operators
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-multiple-conditional-ternary-operators
function checkSign(num) {
    return num === 0 ? "zero"
        : num < 0 ? "negative"
            : "positive"
}

checkSign(10);

//21.#112 Use Recursion to Create a Countdown
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-countdown
function countdown(n){
    if (n < 1){
        return []
    } else {
        const array = countdown(n-1);
        array.unshift(n);
        return array;
    }
}

//22.#113 Use Recursion to Create a Range of Numbers
//https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/use-recursion-to-create-a-range-of-numbers
function rangeOfNumbers(startNum, endNum) {
    if (startNum === endNum){
        return [endNum];
    } else {
        const array = rangeOfNumbers(startNum+1, endNum);
        array.unshift(startNum);
        return array;
    }
};